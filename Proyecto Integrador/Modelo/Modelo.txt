En este texto se describirán los propósitos de cada script dentro de la carpeta del modelo de la aplicación.

Item.cs-------------------------------------------------------------

La clase Item es una clase simple y serializable que representa un artículo con propiedades esenciales como nombre, descripción, precio e imagen. Su diseño es ideal para sistemas de inventario, catálogos de productos o cualquier funcionalidad donde necesites representar objetos en Unity.

Variables 

itemName: El nombre del artículo.
itemDescription: Una breve descripción del artículo.
price: El precio del artículo como un valor flotante.
imagePath: La ruta a la imagen asociada al artículo (puede ser un archivo en el sistema o un recurso en el proyecto Unity).

ItemList.cs---------------------------------------------------------

La clase ItemList es un contenedor serializable que organiza y agrupa múltiples objetos de tipo Item bajo un nombre específico (listName). Es útil para gestionar colecciones de artículos dentro de un inventario, una tienda, o cualquier sistema similar.

Variables

listName: Un nombre descriptivo para identificar la lista de artículos
items: Una lista genérica de objetos Item.

SavingManager.cs----------------------------------------------------

Variables

filePath:
Es la ruta del archivo donde se guardarán o cargarán los datos.


Funciones

SaveItemLists()
Guarda dos listas de objetos ItemList (llamadas firstItemList y secondItemList) en un archivo.

LoadFirstItemList() y LoadSecondItemList()
Carga solo la primera lista (firstItemList o secondItemList) desde el archivo JSON.

ImageTargetManager.cs-----------------------------------------------

Variables

arCamera: Cámara AR utilizada para seguimiento.

jsonFilePath: Ruta del archivo JSON que contiene datos de los objetos.

itemImageTextures: Lista de texturas cargadas de las imágenes de los objetos.

instantiatedImageTargets: Lista de objetos de imagen generados.

currentItemList: Lista actual de objetos seleccionados.

inventoryManager: Referencia al administrador de inventario.

canvasPrefab: Prefab del Canvas para mostrar información.


Funciones:

Start()
Inicializa Vuforia y configura la ruta del archivo JSON.

OnVuforiaStarted()
Indica que Vuforia ha sido inicializado correctamente.

LoadImagesFromJson()
Carga los datos del archivo JSON y crea objetivos de imagen a partir de las imágenes especificadas.

SetItemList(ItemList itemList)
Asigna una lista de objetos actual y garantiza nombres únicos para las listas compartidas.

CreateImageTargetFromPath(string path, string itemName, float price, string currentlist)
Crea un ImageTarget desde un archivo de imagen, genera un Canvas asociado y muestra información como el nombre, precio y lista actual.

OnDestroy()
Limpia los objetivos de imagen instanciados al destruir el objeto.

DestroyAllImageTargets()
Destruye todos los objetivos de imagen generados y limpia la lista.

OnTargetStatusChanged(ObserverBehaviour observer, TargetStatus status)
Verifica el estado del seguimiento del objetivo y muestra información en la consola.

InventoryManager.cs-------------------------------------------------

Script mas importante, conecta es a base que ocnecta el modelo y el view y Tambien maneja los datos de las listas. A continuacion e presentaran las variables y funciones principals e este.

Variables

InputField listNameInputField, itemNameInputField, itemDescriptionInputField, itemPriceInputField, itemNameDefault, itemDescriptionDefault, itemPriceDefault:
Campos de entrada de texto para ingresar el nombre de las listas y los detalles de los items (nombre, descripción, precio).

GameObject itemListPrefab, itemEntryPrefab, itemShareableListPrefab, itemScanListPrefab, itemEditListPrefab:
Prefabs de UI que se instancian para mostrar listas de items, entradas de items, y otros elementos de la interfaz.

Transform itemListContainer, itemDisplayContainer, itemShareableContainer, itemEditListContainer, itemScanListContainer:
Contenedores donde se colocan los items o listas en la interfaz de usuario.

Text itemListTitleText, itemShareableListTitleText, totalPrecioTxt:
Elementos de texto para mostrar el título de las listas y el precio total de los items.

GameObject itemCreationPanel, itemListDisplayPanel, itemEditListDisplayPanel, itemScanListDisplayPanel, panelScanner, panelAviso:
Paneles que se muestran en la UI para crear items, visualizar listas, y mostrar advertencias.

List<ItemList> itemLists, itemListsShareable:
Listas de objetos ItemList que contienen las listas de items regulares y compartibles.

ItemList currentItemList, currentItemListShareable, temporaryList:
Variables para mantener la lista de items actual, la lista compartible actual y una lista temporal para manipulaciones.

SavingManager savingManager:
Componente encargado de guardar y cargar las listas de items.

GameObject scannerCamera:
Referencia a la cámara del escáner.

CameraManager cameraManager:
Referencia al componente que maneja la cámara.

ImageTargetManager imageTargetManager:
Referencia a un componente que maneja los objetos detectados por el escáner (probablemente AR).

CanvasManager canvasManager:
Componente encargado de manejar el estado de la interfaz de usuario y sus interacciones.


Funciones

Start():
Carga las listas de items guardadas al inicio del juego mediante 
savingManager.LoadFirstItemList() y savingManager.LoadSecondItemList()
Actualiza la interfaz de usuario (UI) con las listas de items.

CreateNewShareableItemList(string name, string baseName):
Crea una nueva lista de items compartible basada en un nombre y una lista base.
Clona los items de la lista base en la nueva lista compartible.

AddItemListToShareableUI(ItemList itemList):
Añade un nuevo item a la interfaz de usuario de listas compartibles, instanciando un prefab para la lista y asignando el nombre.

ViewItemListShareable(ItemList itemList):
Muestra los items de una lista compartible en la UI.
Calcula el precio total de los items y lo muestra en la interfaz.

CompareList(string listName):
Compara el nombre de una lista proporcionada con las listas compartibles almacenadas, devuelve true si encuentra una coincidencia.

AddItemToCurrentList(Item newItem):
Añade un nuevo item a la lista actual de items compartibles.

DiscardItems():
Descarta los items que ya existen en la lista temporal de items y los elimina de la lista base.

CreateNewItemList():
Crea una nueva lista de items con el nombre proporcionado desde un campo de entrada.
Guarda la lista creada en itemLists y actualiza la UI.

AddItemListToUI(ItemList itemList):
Añade una nueva lista de items a la interfaz de usuario general, instanciando un prefab para cada lista.

AddItemScanListToUI(ItemList itemList):
Añade una lista de items a la interfaz de usuario de escaneo, permitiendo acceder a la lista desde el escáner.

OpenScanner():
Abre el escáner y asocia la lista de items seleccionada con el ImageTargetManager.

AddItemEditListToUI(ItemList itemList):
Añade un item de lista editable en la UI para editar o borrar listas existentes.
